// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Links_FindLink_FullMethodName    = "/proto.Links/FindLink"
	Links_PostLink_FullMethodName    = "/proto.Links/PostLink"
	Links_GetURLsByID_FullMethodName = "/proto.Links/GetURLsByID"
	Links_DeleteURLs_FullMethodName  = "/proto.Links/DeleteURLs"
)

// LinksClient is the client API for Links service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksClient interface {
	FindLink(ctx context.Context, in *ShortenLink, opts ...grpc.CallOption) (*ShortenLinkResponse, error)
	PostLink(ctx context.Context, in *LongLink, opts ...grpc.CallOption) (*LongLinkResponse, error)
	GetURLsByID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListShortenLinks, error)
	DeleteURLs(ctx context.Context, in *ListShortenLinksToDelete, opts ...grpc.CallOption) (*Empty, error)
}

type linksClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksClient(cc grpc.ClientConnInterface) LinksClient {
	return &linksClient{cc}
}

func (c *linksClient) FindLink(ctx context.Context, in *ShortenLink, opts ...grpc.CallOption) (*ShortenLinkResponse, error) {
	out := new(ShortenLinkResponse)
	err := c.cc.Invoke(ctx, Links_FindLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) PostLink(ctx context.Context, in *LongLink, opts ...grpc.CallOption) (*LongLinkResponse, error) {
	out := new(LongLinkResponse)
	err := c.cc.Invoke(ctx, Links_PostLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) GetURLsByID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListShortenLinks, error) {
	out := new(ListShortenLinks)
	err := c.cc.Invoke(ctx, Links_GetURLsByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) DeleteURLs(ctx context.Context, in *ListShortenLinksToDelete, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Links_DeleteURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServer is the server API for Links service.
// All implementations must embed UnimplementedLinksServer
// for forward compatibility
type LinksServer interface {
	FindLink(context.Context, *ShortenLink) (*ShortenLinkResponse, error)
	PostLink(context.Context, *LongLink) (*LongLinkResponse, error)
	GetURLsByID(context.Context, *Empty) (*ListShortenLinks, error)
	DeleteURLs(context.Context, *ListShortenLinksToDelete) (*Empty, error)
	mustEmbedUnimplementedLinksServer()
}

// UnimplementedLinksServer must be embedded to have forward compatible implementations.
type UnimplementedLinksServer struct {
}

func (UnimplementedLinksServer) FindLink(context.Context, *ShortenLink) (*ShortenLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLink not implemented")
}
func (UnimplementedLinksServer) PostLink(context.Context, *LongLink) (*LongLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLink not implemented")
}
func (UnimplementedLinksServer) GetURLsByID(context.Context, *Empty) (*ListShortenLinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLsByID not implemented")
}
func (UnimplementedLinksServer) DeleteURLs(context.Context, *ListShortenLinksToDelete) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedLinksServer) mustEmbedUnimplementedLinksServer() {}

// UnsafeLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServer will
// result in compilation errors.
type UnsafeLinksServer interface {
	mustEmbedUnimplementedLinksServer()
}

func RegisterLinksServer(s grpc.ServiceRegistrar, srv LinksServer) {
	s.RegisterService(&Links_ServiceDesc, srv)
}

func _Links_FindLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).FindLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Links_FindLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).FindLink(ctx, req.(*ShortenLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_PostLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).PostLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Links_PostLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).PostLink(ctx, req.(*LongLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_GetURLsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetURLsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Links_GetURLsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetURLsByID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_DeleteURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShortenLinksToDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).DeleteURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Links_DeleteURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).DeleteURLs(ctx, req.(*ListShortenLinksToDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// Links_ServiceDesc is the grpc.ServiceDesc for Links service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Links_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Links",
	HandlerType: (*LinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindLink",
			Handler:    _Links_FindLink_Handler,
		},
		{
			MethodName: "PostLink",
			Handler:    _Links_PostLink_Handler,
		},
		{
			MethodName: "GetURLsByID",
			Handler:    _Links_GetURLsByID_Handler,
		},
		{
			MethodName: "DeleteURLs",
			Handler:    _Links_DeleteURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
